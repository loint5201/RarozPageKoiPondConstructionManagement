@page
@using Domain.Enums
@model KoiPondConstructionManagement.Pages.Manager.Admin.Service.RequestDetailModel
@{
}

<input name="requestId" hidden value="@Model.ConstructionRequest?.RequestId" />
<!-- DataTales Example -->
<div class="card shadow mb-4">
    <div class="card-body" style="z-index: 0">
        @* <div class="row">
            <div class="col-md-3">
                <div class="form-group" style="margin-bottom: 0">
                    <label for="quickStatus">Trạng thái</label>
                    <select class="form-control" id="quickStatus" name="quickStatus">
                        <option value="">-- Chọn trạng thái --</option>
                        @foreach (var item in Enum.GetValues(typeof(ConstructionRequestsStatus)))
                        {
                            if ((int)item == (int)ConstructionRequestsStatus.Cancelled) continue;
                            var isSelected = (int)item == (int)Model.ConstructionRequest?.Status;
                            if (isSelected)
                            {
                                <option value="@((int)item)" selected>
                                    @await Html.PartialAsync("_ConstructionRequestsStatusPartial", (int)item)
                                </option>
                            }
                            else
                            {
                                <option value="@((int)item)">
                                    @await Html.PartialAsync("_ConstructionRequestsStatusPartial", (int)item)
                                </option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-3 align-content-end">
                <div class="form-group" style="margin-bottom: 0">
                    <label for="save"></label>
                    <button class="btn btn-primary"
                            id="save"
                            style="padding: .375rem .75rem"
                            btn-action="approved"
                            btn-url="@Url.Page("/Manager/Admin/Service/Request")"
                            btn-path="ChangeStatus"
                            btn-id="@Model.ConstructionRequest?.RequestId">
                        Lưu
                    </button>
                </div>
            </div>
        </div> *@
        <!-- Form Begins -->
        <div class="form">
            <!-- Progress Bar  -->
            <div class="progressbar">
                <div class="progress" id="progress"></div>
                <div class="progress-step progress-step-active" data-title="Chờ xử lý"></div>
                <div class="progress-step" data-title="Đã duyệt"></div>
                <div class="progress-step" data-title="Đang thi công"></div>
                <div class="progress-step" data-title="Đã hoàn thành"></div>
            </div>

            <!-- Form item - Pending -->
            <div class="form-step form-step-active">
                <div name="detail-service">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="fullName">Họ và tên</label>
                                <input type="text" class="form-control" id="fullName" name="fullName"
                                       value="@Model.ConstructionRequest?.Customer?.FullName" readonly>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="text" class="form-control" id="email" name="email"
                                       value="@Model.ConstructionRequest?.Customer?.Email" readonly>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="phoneNumber">Số điện thoại</label>
                                <input type="text" class="form-control" id="phoneNumber" name="phoneNumber"
                                       value="@Model.ConstructionRequest?.Customer?.PhoneNumber" readonly>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="address">Địa chỉ</label>
                                <input type="text" class="form-control" id="address" name="address"
                                       value="@Model.ConstructionRequest?.Customer?.Address" readonly>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="serviceName">Dịch vụ</label>
                                <input type="text" class="form-control" id="serviceName" name="serviceName"
                                       value="@Model.ConstructionRequest?.MaintenanceService?.ServiceName" readonly>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="costEstimate">Mức giá</label>
                                <input type="text" class="form-control" id="costEstimate" name="costEstimate"
                                       value="@Model.ConstructionRequest?.CostEstimate?.ToString("C", new System.Globalization.CultureInfo("vi-VN"))"
                                       readonly>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="customDesignDescription">Mô tả</label>
                                <div>
                                    @Html.Raw(@Model.ConstructionRequest?.CustomDesignDescription)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form item - Approved -->
            <div class="form-step">
                <!-- Table for Process Design -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <h4>Thiết kế quy trình <span class="text-danger process-initiation">(Bạn chưa khởi tạo quy trình)</span></h4>
                        <table class="table table-bordered" id="processTable">
                            <thead>
                                <tr>
                                    <th width="100px">Bước</th>
                                    <th>Thông tin</th>
                                    <th width="250px">Giao việc cho</th>
                                    <th>Trạng thái</th>
                                    <th style="max-width: 500px">Ghi chú</th>
                                    <th width="120px" class="text-center">Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows will be added dynamically here -->
                            </tbody>
                        </table>
                        @if (Model.ConstructionRequest.Status == (int)ConstructionRequestsStatus.Approved)
                        {
                            <div class="d-flex gap-10">
                                <button class="btn btn-primary" id="addRowBtn">Thêm bước mới</button>
                                <button class="btn btn-success" id="submitBtn">Lưu</button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Form item - InProgress -->
            <div class="form-step">
                @if (Model.LstConstructionProcess != null && Model.LstConstructionProcess.Count > 0)
                {
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <h4>Quy trình thi công</h4>
                            <table class="table table-bordered" id="inProgressTable">
                                <thead>
                                    <tr>
                                        <th width="100px">Bước</th>
                                        <th class="text-left">Thông tin</th>
                                        <th width="250px" class="text-left">Giao việc cho</th>
                                        <th class="text-center">Trạng thái</th>
                                        <th class="text-left">Ghi chú</th>
                                        <th class="text-center">Thời gian cập nhật</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be added dynamically here -->
                                    @foreach (var process in Model.LstConstructionProcess)
                                    {
                                        <tr>
                                            <td class="text-right">@process.Step</td>
                                            <td class="text-left">@Html.Raw(process.StepInfo)</td>
                                            <td class="text-left">@Html.Raw(process.AssignedStaff?.FullName)</td>
                                            <td class="text-center">@await Html.PartialAsync("_ConstructionProcessStatusPartial", process.Status)</td>
                                            <td class="text-left">@Html.Raw(process.Note)</td>
                                            <td class="text-center">@process.UpdatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>

            <!-- Form item - Completed -->
            <div class="form-step">
                <div class="row">
                    <div class="col-md-12 text-center">
                        <h4>Lịch sử đơn hàng</h4>
                        @if (Model.CustomerOrderHistory != null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th class="text-right">Mã đơn hàng</th>
                                        <th class="text-right">Tổng tiền</th>
                                        <th class="text-center">Phương thức thanh toán</th>
                                        <th class="text-center">Trạng thái</th>
                                        <th class="text-center">Thời gian tạo</th>
                                        <th class="text-center">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be added dynamically here -->
                                    <tr>
                                        <td class="text-right">@Model.CustomerOrderHistory.HistoryId</td>
                                        <td class="text-right">@Model.CustomerOrderHistory.ActualCost.ToString("C", new System.Globalization.CultureInfo("vi-VN"))</td>
                                        <td class="text-center">@await Html.PartialAsync("_PaymentMethodPartial", @Model.CustomerOrderHistory.PaymentMethod)</td>
                                        <td class="text-center">@await Html.PartialAsync("_PaymentStatusPartial", @Model.CustomerOrderHistory.PaymentStatus)</td>
                                        <td class="text-center">@Model.CustomerOrderHistory.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                        <td class="text-center">
                                            <button 
                                                class="btn btn-primary btn-sm m-auto" 
                                                btn-action="createOrder" 
                                                btn-url="@Url.Page("/Manager/Admin/Service/RequestDetail")" 
                                                btn-path="CreateOrder" 
                                                btn-id="@Model.ConstructionRequest?.RequestId">Cập nhật
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Bạn chưa tạo đơn hàng cho yêu cầu này.</p>
                            <!-- Nút tạo đơn hàng -->
                            <div class="text-center">
                                <button 
                                    class="btn btn-primary m-auto"
                                    btn-action="createOrder"
                                    btn-url="@Url.Page("/Manager/Admin/Service/RequestDetail")"
                                    btn-path="CreateOrder"
                                    btn-id="@Model.ConstructionRequest?.RequestId">
                                    Tạo đơn hàng
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Form Ends -->
    </div>
</div>

@section Scripts {
    <script src="~/js/ckeditor5/ckeditor.min.js"></script>
    <script>
        const prevBtns = document.querySelectorAll(".btn-prev");
        const nextBtns = document.querySelectorAll(".btn-next");
        const progress = document.querySelector(".progress");
        const formSteps = document.querySelectorAll(".form-step");
        const progressSteps = document.querySelectorAll(".progress-step");

        let formStepsNum = 0;

        /* Event Listener for Next Button. */
        nextBtns.forEach((btn) => {
            btn.addEventListener("click", () => {
                formStepsNum++;
                updateFormSteps();
                updateProgressbar();
            });
        });

        /* Event Listener for Back Button. */
        prevBtns.forEach((btn) => {
            btn.addEventListener("click", () => {
                formStepsNum--;
                updateFormSteps();
                updateProgressbar();
            });
        });

        /* Event click progressSteps */
        progressSteps.forEach((progressStep, index) => {
            progressStep.addEventListener("click", () => {
                formStepsNum = index;
                updateFormSteps();
                updateProgressbar();
            });
        });

        /* Updates Form Items */
        function updateFormSteps() {
            formSteps.forEach((formStep) => {
                formStep.classList.contains("form-step-active") &&
                    formStep.classList.remove("form-step-active")
            })

            formSteps[formStepsNum].classList.add("form-step-active");
        }

        /* Updates Progress Bar */
        function updateProgressbar() {
            progressSteps.forEach((progressStep, index) => {
                if (index < formStepsNum + 1) {
                    progressStep.classList.add('progress-step-active')


                } else {
                    progressStep.classList.remove('progress-step-active')
                }
            })
            progress.style.width = ((formStepsNum) / (progressSteps.length - 1)) * 100 + "%";

        }
    </script>
    <script>
        $(document).ready(function () {
            let lastStatus = @(Model.ConstructionRequest?.Status - 1);
            if (lastStatus > 0) {
                formStepsNum = lastStatus;
                updateFormSteps();
                updateProgressbar();
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            const tableBody = $('#processTable tbody');
            const addRowBtn = $('#addRowBtn');
            const submitBtn = $('#submitBtn');
            let stepCounter = 1; // Biến để theo dõi số bước hiện tại
            let isDesginService = @(Model.ConstructionRequest?.MaintenanceService?.RequireDesign == true ? "true" : "false");
            let constructionProcesses = @Html.Raw(Model.ConstructionProcesses);
            $('.process-initiation').hide();
            if (!constructionProcesses || constructionProcesses.length == 0) {
                $('.process-initiation').show();
            }
            let requestStatus = @(Model.ConstructionRequest?.Status);

            // Danh sách lưu trữ các bước công việc
            let stepsList = [];

            // Danh sách nhân viên mẫu (có thể thay thế bằng dữ liệu động)
            const employeeList = @Html.Raw(Model.UserSystem);

            // Hàm để tạo dropdown cho danh sách nhân viên
            function generateEmployeeSelect(selectedValue = '') {
                let select = '<select required class="form-control" name="assignedStaffId">';
                select += '<option value="">Chọn nhân viên</option>';
                employeeList.forEach(emp => {
                    select += `<option value="${emp.userId}" ${selectedValue == emp.userId ? 'selected' : ''}>${emp.fullName}</option>`;
                });
                select += '</select>';
                return select;
            }

            // Hàm để tạo dropdown status cho bước công việc
            function generateStatusSelect(selectedValue = '') {
                let select = '<select required class="form-control" name="status">';
                select += '<option value="0" ' + (selectedValue == 0 ? 'selected' : '') + '>Chờ xử lý</option>';
                select += '<option value="1" ' + (selectedValue == 1 ? 'selected' : '') + '>Đang thi công</option>';
                select += '<option value="2" ' + (selectedValue == 2 ? 'selected' : '') + '>Đã hoàn thành</option>';
                select += '</select>';
                return select;
            }

            function generatRowAction(step) {
                const row = `<button type="button" class="btn btn-sm btn-danger deleteRowBtn">Xóa</button>`;
                if (requestStatus == 2) return row;
                return ''
            }

            // Function to render rows from stepsList
            function renderTable() {
                tableBody.empty(); // Clear the current table
                stepsList.forEach((step, index) => {
                    const newRow = `
                        <tr data-index="${index}">
                            <td><input required type="number" min="1" class="form-control" name="step" value="${step.step ?? 1}"></td>
                            <td><input required type="text" class="form-control" name="stepInfo" value="${step.stepInfo ?? ''}" data-field="stepInfo"></td>
                            <td>${generateEmployeeSelect(step.assignedStaffId)}</td> <!-- Dropdown cho nhân viên -->
                            <td>${generateStatusSelect(step.status ?? 0)}</td> <!-- Dropdown cho trạng thái -->
                            <td style="max-width: 500px"><textarea is-ckeditor type="text" class="form-control" name="note" data-field="note">${step.note}</textarea></td>
                            <td class="text-center">
                                ${generatRowAction(step)}
                            </td>
                        </tr>
                    `;

                    tableBody.append(newRow);

                    // nếu table có is-disable thì disable all input, select, textarea
                    if (requestStatus != 2) {
                        tableBody.find('input, select, textarea').attr('disabled', true);
                    }
                });

                // Tạo mới CKEditor cho tất cả có attribute is-ckeditor
                $('[is-ckeditor]').each(async function () {
                    // Kiểm tra nếu CKEditor chưa được khởi tạo
                    if (!$(this).data('ckeditor-initialized')) {
                        const editor = await ClassicEditor.create(this, {
                            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'undo', 'redo', 'imageUpload'],
                            // toolbar: ['FontFamily', 'Heading', 'Paragraph', '|', 'bold', 'italic', 'Underline', 'FontColor', 'FontSize', 'Highlight', '|', 'numberedList', 'bulletedList', 'List', 'outdent', 'indent', '|', 'alignment:left', 'alignment:right', 'alignment:center', 'alignment:justify', '|', 'Link', 'ImageUpload', 'MediaEmbed', '|', 'undo', 'redo', 'PasteFromOffice', 'Autoformat', 'Essentials', 'TextTransformation'],
                            heading: {
                                options: [
                                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                                    { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                                    { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' }
                                ]
                            },
                            image: {
                                toolbar: ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
                                styles: ['full', 'alignLeft', 'alignRight']
                            },
                            ckfinder: {
                                uploadUrl: '/Manager/Admin/Service/RequestDetail?handler=UploadFile',
                                customXHR: (xhr) => {
                                    xhr.setRequestHeader('RequestVerificationToken', getToken());
                                }
                            },
                            mediaEmbed: {
                                previewsInData: true
                            },
                            fontSize: {
                                options: [9, 11, 13, 'default', 17, 19, 21, 23, 25, 27]
                            },
                            indentBlock: {
                                offset: 1,
                                unit: 'em'
                            }
                        });
                        editor.setData(this.value);
                        editor.model.document.on('change:data', () => {
                            // this.value = editor.getData();
                            const row = $(this).closest('tr');
                            const index = row.data('index');
                            stepsList[index].note = editor.getData(); // Cập nhật giá trị vào danh sách
                        });
                        // Đánh dấu rằng CKEditor đã được khởi tạo
                        $(this).data('ckeditor-initialized', true);
                    }
                });
            }

            // Function to add a new step to stepsList
            function addStep(stepInfo = '', assignedStaffId = '', status = 0, note = '') {
                const step = stepsList.length + 1; // Số bước tự động tăng
                stepsList.push({ step, stepInfo, assignedStaffId, status, note });
                renderTable(); // Render lại bảng sau khi thêm
            }

            // Add new row when button is clicked
            addRowBtn.click(function () {
                addStep(); // Thêm dòng mới với các giá trị trống
            });

            // Delegate event listener for Delete button
            tableBody.on('click', '.deleteRowBtn', function () {
                const index = $(this).closest('tr').data('index');
                stepsList.splice(index, 1); // Xóa phần tử khỏi danh sách
                renderTable(); // Render lại bảng
            });

            // Lắng nghe sự kiện thay đổi trên các input và select
            tableBody.on('change', 'input, select', function () {
                const row = $(this).closest('tr');
                const index = row.data('index');
                const field = $(this).attr('name'); // Lấy tên trường

                stepsList[index][field] = $(this).val(); // Cập nhật giá trị vào danh sách
            });

            if (constructionProcesses && constructionProcesses.length) {
                stepsList = constructionProcesses;
                renderTable();
            } else {
                // Quy trình đặt thi công hồ cá Koi (khách hàng có thể theo dõi)
                if (isDesginService) {
                    addStep('Tư vấn');
                    addStep('Thiết kế ý tưởng');
                    addStep('Lập hồ sơ thiết kế');
                    addStep('Thi công');
                    addStep('Nghiệm thu và bàn giao');
                }

                // Quy trình đặt dịch vụ vệ sinh, chăm sóc, bảo dưỡng hồ cá Koi (khách hàng có thể theo dõi)
                if (!isDesginService) {
                    addStep('Thi công');
                    addStep('Nghiệm thu và bàn giao');
                }
            }

            // Submit button action
            submitBtn.click(async function () {
                const requestId = $('input[name="requestId"]').val();
                const requiredFields = document.querySelectorAll('input[required], select[required]');
                for (let i = 0; i < requiredFields.length; i++) {
                    if (!requiredFields[i].value) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi',
                            text: 'Vui lòng điền đầy đủ thông tin!',
                        });
                        return;
                    }
                }

                let { success, message, data } = await $.callAjax(`/Manager/Admin/Service/RequestDetail?handler=UpdateProcess&requestId=${requestId}`, 'POST', {
                    process: stepsList
                });

                if (!success) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: message
                    });
                } else {
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công',
                    }).then(() => {
                        window.location.reload();
                    });
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // tạo base btn click
            $('a[btn-action], button[btn-action]').click(async function () {
                var action = $(this).attr('btn-action');
                var url = $(this).attr('btn-url');
                var path = $(this).attr('btn-path');
                var id = $(this).attr('btn-id');
                var status = $('#quickStatus').val();
                var optionStatus = $('#quickStatus option:selected').text();

                if (!url || !path) return;
                action = action.toLowerCase();

                if (action == "createorder") {
                    // Tạo form trong Swal với Bootstrap
                    let { value: formValues } = await Swal.fire({
                        title: 'Tạo đơn hàng',
                        html: `
                            <div class="form-group text-left">
                                <label for="actualCost">Tổng tiền</label>
                                <input id="actualCost" type="number" value="@(Model.CustomerOrderHistory?.ActualCost ?? 0)" class="form-control" placeholder="Nhập tổng tiền" style="margin-bottom: 15px;">
                            </div>
                            
                            <div class="form-group text-left">
                                <label for="paymentMethod">Phương thức thanh toán</label>
                                <select id="paymentMethod" class="form-control" style="margin-bottom: 15px;">
                                    <option value="1" @(Model.CustomerOrderHistory?.PaymentMethod == 1 ? "selected" : "")>Tiền mặt</option>
                                    <option value="2" @(Model.CustomerOrderHistory?.PaymentMethod == 2 ? "selected" : "")>Chuyển khoản</option>
                                </select>
                            </div>
                            
                            <div class="form-group text-left">
                                <label for="paymentStatus">Trạng thái thanh toán</label>
                                <select id="paymentStatus" class="form-control">
                                    <option value="1" @(Model.CustomerOrderHistory?.PaymentStatus == 1 ? "selected" : "")>Chưa thanh toán</option>
                                    <option value="2" @(Model.CustomerOrderHistory?.PaymentStatus == 2 ? "selected" : "")>Đã thanh toán</option>
                                </select>
                            </div>
                        `,
                        focusConfirm: false,
                        preConfirm: () => {
                            if (!$('#actualCost').val()) {
                                Swal.showValidationMessage('Vui lòng nhập tổng tiền!');
                                return;
                            }
                            return {
                                actualCost: $('#actualCost').val(),
                                paymentMethod: $('#paymentMethod').val(),
                                paymentStatus: $('#paymentStatus').val()
                            };
                        }
                    });

                    if (!formValues) return;

                    let { success, message } = await $.callAjax(`${url}?handler=${path}&requestId=${id}`, 'POST', formValues);
                    if (!success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: message
                        });
                    } else {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công',
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                    return;
                }


                let message = "",
                    rejectReason = "";

                if (status == @((int)ConstructionRequestsStatus.Rejected)) {
                    message = "Từ chối yêu cầu";
                    let { value: reason } = await Swal.fire({
                        title: 'Nhập lý do từ chối',
                        input: 'text',
                        inputPlaceholder: 'Lý do từ chối',
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (!value) {
                                return 'Vui lòng nhập lý do từ chối!';
                            }
                        }
                    });
                    if (!reason) return;
                    rejectReason = reason;
                } else {
                    message = optionStatus?.trim();
                }

                let cf = await Swal.fire({
                    title: `Thay đổi trạng thái thành <${message}>`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Hủy'
                });

                if (cf.isConfirmed) {
                    let { success, message } = await $.callAjax(`${url}?handler=${path}&requestId=${id}`, 'POST', { status: status, rejectReason: rejectReason });
                    if (!success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: message
                        });
                    } else {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công',
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                }
            });
        });
    </script>
}